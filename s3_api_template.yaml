AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >

 Stack for API Gateway and S3 deployment

Parameters:
  staticAssetBucket:
    Type: String
    Description: The name of bucket where assets will be stored.
  deploymentRegion:
    Type: String
    Description: The region where app will be deployed.     
  deploymentEnvironment:
    Type: String
    Description: The value of deployment environment required for stage of API
  iamRole:
    Type: String
    AllowedPattern: arn:(aws[a-zA-Z-]*)?:iam::\d{12}:role/?[a-zA -Z_0-9+=,.@\-_/]+
    Description: The ARN of role for all Lambda Functions.
  allowedOriginHost:
    Type: String
    Description: The allowed origin for CORS configuration

Resources:
  S3API:
    Type: AWS::Serverless::Api
    Properties:
      BinaryMediaTypes: 
        - "*~1*"
      StageName: !Ref deploymentEnvironment
      DefinitionBody: {
        "swagger": "2.0",
        "info": {
          "version": "1.0",
          "title": !Sub "s3-binary-files-${deploymentEnvironment}-api"
        },
        "paths": {
          "/v1/files{proxy+}": {
            "get": {
              "produces": [
                "application/json"
              ],
              "parameters":[
                {
                  "name":"proxy",
                  "in":"path",
                  "required":"true",
                  "type":"string"
                }
              ],
              "responses": {
                "200": {
                  "description": "OK",
                  "headers": {
                    "Content-Type":{
                      "type":"string",
                    },
                  "Access-Control-Allow-Origin": {
                    "type": "string"
                    }                     
                  }
                },
                "500":{
                  "description": "Internal Server Error",
                  "content":{}
                }
              },
              "x-amazon-apigateway-integration": {
                "requestParameters":{
                  "integration.request.path.proxy": "method.request.path.proxy"
                },                
                "responses": {
                  "default": {
                    "statusCode": "200",
                    "responseParameters":{
                      "method.response.header.Content-Type": "integration.response.header.Content-Type",
                      "method.response.header.Access-Control-Allow-Origin": !Sub "'${allowedOriginHost}'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Api-Key'",
                      "method.response.header.Access-Control-Allow-Methods": "'GET,POST,OPTIONS'"
                    },
                    "responseTemplates" : {
                      "application/json": ""
                      }
                  }
                },
                "credentials": !Ref  iamRole,
                "uri": !Sub "arn:aws:apigateway:${deploymentRegion}:s3:path/${staticAssetBucket}/{proxy}",
                "passthroughBehavior": "when_no_match",
                "httpMethod": "GET",
                "type": "aws"
              }
            },
          }                      
        }     
      } 
 
Outputs:
  APIDetails:
    Description: "API Gateway host and stage for endpoint URL"
    Value: !Sub "https://${S3API}.execute-api.${AWS::Region}.amazonaws.com/${deploymentEnvironment}/v1/files"
